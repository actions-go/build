name: "Test build action"

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
  pull_request:

jobs:
  test-without-pre-build:
    strategy:
      matrix:
        runs-on:
        - ubuntu-latest
        - windows-latest
        - macos-latest
    runs-on: ${{ matrix.runs-on }}
    steps:
    - uses: actions/checkout@v4
    - uses: ./
      id: build
      with:
        action_path: ${{ github.workspace }}
        action: my-action
        go-version: "1.21"
    - name: "Check install path value"
      shell: python
      run: |
        import platform
        import os
        if platform.system() == "Windows":
          expected = "{}\\my-action2-{}-{}.exe".format(${{ toJSON(github.workspace) }}, platform.system(), platform.machine())
        else:
          expected = "{}/my-action-{}-{}".format(${{ toJSON(github.workspace) }}, platform.system(), platform.machine())
        expected = expected.replace("AMD64", "x86_64")
        expected=os.path.normpath(expected)
        got=os.path.normpath("${{ steps.build.outputs.install-path }}")
        assert got == expected, "install path {} mismatch expected path {}".format(got, expected)
    - name: "output can be run"
      run: |
        ${{ steps.build.outputs.install-path }}
    - name: "output runs as expected"
      shell: python
      run: |
        import subprocess
        output = subprocess.check_output([${{ toJSON(steps.build.outputs.install-path) }}]).strip()
        print(output)
        assert output == b"success"

  test-subfolder:
    strategy:
      matrix:
        runs-on:
        - ubuntu-latest
        - windows-latest
        - macos-latest
    runs-on: ${{ matrix.runs-on }}
    steps:
    - uses: actions/checkout@v4
    - uses: ./
      id: build
      with:
        action_path: ${{ github.workspace }}/cmd/action/
        action: my-action
        go-version: "1.21"
    - name: "Check install path value"
      shell: python
      run: |
        import platform
        import os
        if platform.system() == "Windows":
          expected = "{}\\cmd\\action\\my-action2-{}-{}.exe".format(${{ toJSON(github.workspace) }}, platform.system(), platform.machine())
        else:
          expected = "{}/cmd/action/my-action-{}-{}".format(${{ toJSON(github.workspace) }}, platform.system(), platform.machine())
        expected = expected.replace("AMD64", "x86_64")
        expected=os.path.normpath(expected)
        got=os.path.normpath("${{ steps.build.outputs.install-path }}")
        assert got == expected, "install path {} mismatch expected path {}".format(got, expected)
    - name: "output can be run"
      run: |
        ${{ steps.build.outputs.install-path }}
    - name: "output runs as expected"
      shell: python
      run: |
        import subprocess
        output = subprocess.check_output([${{ toJSON(steps.build.outputs.install-path) }}]).strip()
        print(output)
        assert output == b"in subfolder"

  test-with-pre-build:
    strategy:
      matrix:
        runs-on:
        - ubuntu-latest
        # - windows-latest
        - macos-latest
    runs-on: ${{ matrix.runs-on }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v4
      with:
        go-version: 1.21
    - run: |
        echo "#!/bin/bash" >> "${{ github.workspace }}/my-action-$(uname -s)-$(uname -m)"
        echo "echo prebuilt" >> "${{ github.workspace }}/my-action-$(uname -s)-$(uname -m)"
        chmod +x "${{ github.workspace }}/my-action-$(uname -s)-$(uname -m)"
    - uses: ./
      id: build
      with:
        action_path: ${{ github.workspace }}
        action: my-action
    - name: "Output path is os and architecture dependant"
      run: |
        [ "${{ steps.build.outputs.install-path }}" == "${{ github.workspace }}/my-action-$(uname -s)-$(uname -m)" ]
    - name: "output can be run"
      run: |
        ${{ steps.build.outputs.install-path }}
    - name: "output runs as expected"
      shell: python
      run: |
        import subprocess
        output = subprocess.check_output(["${{ steps.build.outputs.install-path }}"]).strip()
        print(output)
        assert output == b"prebuilt"